/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IVampireStakeInterface extends utils.Interface {
  functions: {
    "bloodCollected(address)": FunctionFragment;
    "bloodPerStakeEmbedded()": FunctionFragment;
    "checkOverShoulder()": FunctionFragment;
    "collectBlood()": FunctionFragment;
    "embedStake(uint256)": FunctionFragment;
    "hunterStakesEmbedded(address)": FunctionFragment;
    "notifyBloodAmount(uint256)": FunctionFragment;
    "runAway()": FunctionFragment;
    "setHuntDuration(uint256)": FunctionFragment;
    "totalStakesEmbedded()": FunctionFragment;
    "updateBloodToken(address)": FunctionFragment;
    "updateStakeToken(address)": FunctionFragment;
    "withdrawStake(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bloodCollected"
      | "bloodPerStakeEmbedded"
      | "checkOverShoulder"
      | "collectBlood"
      | "embedStake"
      | "hunterStakesEmbedded"
      | "notifyBloodAmount"
      | "runAway"
      | "setHuntDuration"
      | "totalStakesEmbedded"
      | "updateBloodToken"
      | "updateStakeToken"
      | "withdrawStake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bloodCollected",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bloodPerStakeEmbedded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkOverShoulder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectBlood",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "embedStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hunterStakesEmbedded",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyBloodAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "runAway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setHuntDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakesEmbedded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBloodToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStakeToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "bloodCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bloodPerStakeEmbedded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOverShoulder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectBlood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "embedStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hunterStakesEmbedded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyBloodAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "runAway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHuntDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakesEmbedded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBloodToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStakeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IVampireStake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVampireStakeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bloodCollected(
      _hunter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bloodPerStakeEmbedded(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkOverShoulder(overrides?: CallOverrides): Promise<[BigNumber]>;

    collectBlood(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    embedStake(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hunterStakesEmbedded(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    notifyBloodAmount(
      _bloodAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    runAway(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHuntDuration(
      _huntDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalStakesEmbedded(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateBloodToken(
      _bloodToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawStake(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bloodCollected(
    _hunter: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bloodPerStakeEmbedded(overrides?: CallOverrides): Promise<BigNumber>;

  checkOverShoulder(overrides?: CallOverrides): Promise<BigNumber>;

  collectBlood(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  embedStake(
    _stakeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hunterStakesEmbedded(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  notifyBloodAmount(
    _bloodAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  runAway(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHuntDuration(
    _huntDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalStakesEmbedded(overrides?: CallOverrides): Promise<BigNumber>;

  updateBloodToken(
    _bloodToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStakeToken(
    _stakeToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawStake(
    _stakeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bloodCollected(
      _hunter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bloodPerStakeEmbedded(overrides?: CallOverrides): Promise<BigNumber>;

    checkOverShoulder(overrides?: CallOverrides): Promise<BigNumber>;

    collectBlood(overrides?: CallOverrides): Promise<void>;

    embedStake(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hunterStakesEmbedded(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyBloodAmount(
      _bloodAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    runAway(overrides?: CallOverrides): Promise<void>;

    setHuntDuration(
      _huntDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalStakesEmbedded(overrides?: CallOverrides): Promise<BigNumber>;

    updateBloodToken(
      _bloodToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStake(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bloodCollected(
      _hunter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bloodPerStakeEmbedded(overrides?: CallOverrides): Promise<BigNumber>;

    checkOverShoulder(overrides?: CallOverrides): Promise<BigNumber>;

    collectBlood(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    embedStake(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hunterStakesEmbedded(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    notifyBloodAmount(
      _bloodAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    runAway(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHuntDuration(
      _huntDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalStakesEmbedded(overrides?: CallOverrides): Promise<BigNumber>;

    updateBloodToken(
      _bloodToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawStake(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bloodCollected(
      _hunter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bloodPerStakeEmbedded(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkOverShoulder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectBlood(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    embedStake(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hunterStakesEmbedded(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    notifyBloodAmount(
      _bloodAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    runAway(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHuntDuration(
      _huntDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalStakesEmbedded(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBloodToken(
      _bloodToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStakeToken(
      _stakeToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      _stakeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
